

// ================================================================
// ===                          CODE                            ===
// ================================================================

	- Config options are primarily the arguments to constructors
	- Metadata about options inline in code


	- Format:

		ExampleCtor() 
		{
			// type		param name			=	default value		json meta data
			// 														Format: //~ Type Possible_Vals <Default_Val> | Description ~


			// An int-like parameter that should be constrained to a minimum and maximum value
			int			int_range_param		= 	3					//~ Int [1-5] <3> | Description ~

			// An int-like parameter that should be set to one of a provided set of possible values
			int			int_discrete_param	=	10					//~ Set(Int) {1(alias), 2(alias), 3(alias),10(alias)} <10> | Description ~

			// A float parameter that should be constrained to a minimum and maximum value
			float		float_param			=	4.56				//~ Float [0.-10.] <4.56> | Description ~

			// A boolean parameter 
			bool		bool_param			=	true				//~ Bool <true> | Description ~

			// A string parameter (only c-strings, no Strings)
			char*		string_param 		=	"DefaultString"		//~ String <"Default"> | Description ~

			// An enum parameter where GUI will display a user-friendly string, but Json output will need to be an int 
			// the int will be cast to the correct value of the enum on the device
			EnumType	some_enum2			=	EnumType::EX1		//~ Set(OLED_FORMAT) {0("Alias 0"), 1("Alias 1"), 2("Alias 2")} <1> | Description ~

		}




// ================================================================
// ===                  MASTER JSON GENERATED                   ===
// ================================================================

- This is what should be generated by parsing the the code from GitHub
- for metadata about constructor options.
- It describes all of the possible configurations currently permitted
- This is just an approximate - adjust it as needed as the device code wont see this
- Should probably have a way to indicate Loom Module inheritance structure
	- As to be able group module by category as defined by hierarchy

Example 

{
	"general" :
	{
		"device_name"	: 
		"instance_num"	: 
		"family_num"	: 
		... 
	},

	"components": 
	{
		"Sensors" : 
		{
			"ExampleSensor" : {
				"desc" : 
				"parameters" :  
				{
					"module name" : { "String" }
				}
			}	
		}

		"CommPlats" : 
		{
			"LoRa" : 
			{
				"desc" : "..."
				"parameters" : 
				{
					"module_name"		: { "String" },
					"max_message_len"	: { "Set" : [RH_RF95_MAX_MESSAGE_LEN, ...] },
					"compress_messages"	: { "Bool" } ,
					"address"			: { Int_Range" : [0, 99] },
					"power_level"		: { Int_Range" : [0, 23] },
					"retry_count"		: { Int_Range" : [0, 3] },
					"retry_timeout"		: { Int_Range" : [50, 1000] }
				}
			},
		}

		...

		"Device1" : 
		{
			desc: "..."
			parameters: 
			{
				...
			}
		},

		...
		
	}

}


// ================================================================
// ===                   REFINED JSON OUTPUT                    ===
// ================================================================
 
 
- This is the output of from the Configurator and is put in the sketch
- folder or sent to the device at runtime
- Options should no longer be in terms of ranges or possible values, 
- but exact values



{
	"general" :
	{
		"device_name"	: "name",
		"instance_num"	: 1,
		"family_num"	: 0,
	},

	"components": 
	[
		{
			"name" : "Device1",
			"desc": "Some description of device 1",
			"parameters": 
			[
				123,
				4.56,
				true
			]
		},
		{
			"name" : "Device2",
			"desc": "Some description of device 2",
			"parameters": 
			[
				123,
				4.56,
				-789,
				123,
				123,
				123
			]
		},		
		{
			"name" : "Device3",
			"desc": "Some description of device 3 which uses enums as ctor arguments",
			"parameters": 
			[
				0,
				1,
				2,
				3
			]
		}
		
	]

}



